'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _utils = require('./utils');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _TimeInput = require('./TimeInput');

var _TimeInput2 = _interopRequireDefault(_TimeInput);

var _HourPicker = require('./HourPicker');

var _HourPicker2 = _interopRequireDefault(_HourPicker);

var _MinutePicker = require('./MinutePicker');

var _MinutePicker2 = _interopRequireDefault(_MinutePicker);

var _OutsideClickHandler = require('./OutsideClickHandler');

var _OutsideClickHandler2 = _interopRequireDefault(_OutsideClickHandler);

require('./index.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TimePicker = function (_React$Component) {
  _inherits(TimePicker, _React$Component);

  function TimePicker(props) {
    _classCallCheck(this, TimePicker);

    var _this = _possibleConstructorReturn(this, (TimePicker.__proto__ || Object.getPrototypeOf(TimePicker)).call(this, props));

    var time = void 0;

    if (props.time) {
      time = props.time.split(':');
    } else {
      time = [null, null];
    }

    _this.state = {
      hour: time[0],
      minute: time[1],
      active: false,
      minutes: (0, _utils.generateMinutes)(),
      hours: (0, _utils.generateHours)()
    };
    return _this;
  }

  _createClass(TimePicker, [{
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      document.getElementById('timeInput').value = this.getHourAndMinute();
      this.props.onChange(this.getHourAndMinute());
    }
  }, {
    key: 'onMinuteIncrease',
    value: function onMinuteIncrease() {
      var lastMinuteIndex = this.getMinuteIndex();
      if (lastMinuteIndex < this.state.minutes.length - 1) {
        this.setState({
          minute: this.state.minutes[+lastMinuteIndex + 1]
        });
      } else {
        this.setState({
          minute: this.state.minutes[0]
        });
      }
    }
  }, {
    key: 'onMinuteDecrease',
    value: function onMinuteDecrease() {
      var lastMinuteIndex = this.getMinuteIndex();
      if (lastMinuteIndex > 0) {
        this.setState({
          minute: this.state.minutes[+lastMinuteIndex - 1]
        });
      } else {
        this.setState({
          minute: this.state.minutes[this.state.minutes.length - 1]
        });
      }
    }
  }, {
    key: 'onHourIncrease',
    value: function onHourIncrease() {
      var lastHourIndex = this.getHourIndex();
      if (lastHourIndex < this.state.hours.length - 1) {
        this.setState({
          hour: this.state.hours[+lastHourIndex + 1]
        });
      } else {
        this.setState({
          hour: this.state.hours[0]
        });
      }
    }
  }, {
    key: 'onHourDecrease',
    value: function onHourDecrease() {
      var lastHourIndex = this.getHourIndex();
      if (lastHourIndex > 0) {
        this.setState({
          hour: this.state.hours[+lastHourIndex - 1]
        });
      } else {
        this.setState({
          hour: this.state.hours[this.state.hours.length - 1]
        });
      }
    }
  }, {
    key: 'toggleVisible',
    value: function toggleVisible() {
      var _state = this.state;
      var hour = _state.hour;
      var minute = _state.minute;

      if (!hour || !minute) {
        this.setState({
          hour: '06',
          minute: '00'
        });
      }

      this.setState({ active: !this.state.active });
    }
  }, {
    key: 'getHourAndMinute',
    value: function getHourAndMinute() {
      var _state2 = this.state;
      var hour = _state2.hour;
      var minute = _state2.minute;

      if (!hour || !minute) {
        return null;
      }
      return this.state.hour + ':' + this.state.minute;
    }
  }, {
    key: 'getMinuteIndex',
    value: function getMinuteIndex() {
      var _this2 = this;

      return this.state.minutes.findIndex(function (min) {
        return min === _this2.state.minute;
      });
    }
  }, {
    key: 'getHourIndex',
    value: function getHourIndex() {
      var _this3 = this;

      return this.state.hours.findIndex(function (hour) {
        return hour === _this3.state.hour;
      });
    }
  }, {
    key: 'onClearFocus',
    value: function onClearFocus(e) {
      this.setState({
        active: false
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var active = this.state.active;

      var timePickerClasses = (0, _classnames2.default)('TimePicker', { 'TimePicker--show': active });
      var time = this.getHourAndMinute();

      return _react2.default.createElement(
        'div',
        { id: 'TimePickerRoot', className: 'TimePickerRoot' },
        _react2.default.createElement(
          _OutsideClickHandler2.default,
          { onOutsideClick: this.onClearFocus.bind(this) },
          _react2.default.createElement(_TimeInput2.default, {
            onClick: this.toggleVisible.bind(this),
            active: active,
            time: time
          }),
          _react2.default.createElement(
            'div',
            { id: 'TimePicker', className: timePickerClasses },
            _react2.default.createElement(_HourPicker2.default, {
              onHourIncrease: this.onHourIncrease.bind(this),
              onHourDecrease: this.onHourDecrease.bind(this),
              hour: this.state.hour
            }),
            _react2.default.createElement(_MinutePicker2.default, {
              onMinuteIncrease: this.onMinuteIncrease.bind(this),
              onMinuteDecrease: this.onMinuteDecrease.bind(this),
              minute: this.state.minute
            })
          )
        )
      );
    }
  }]);

  return TimePicker;
}(_react2.default.Component);

exports.default = TimePicker;


TimePicker.propTypes = {
  time: _react2.default.PropTypes.string,
  onChange: _react2.default.PropTypes.func.isRequired
};