'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

require('./MinutePicker.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MinutePicker = function (_React$Component) {
  _inherits(MinutePicker, _React$Component);

  function MinutePicker() {
    _classCallCheck(this, MinutePicker);

    return _possibleConstructorReturn(this, (MinutePicker.__proto__ || Object.getPrototypeOf(MinutePicker)).apply(this, arguments));
  }

  _createClass(MinutePicker, [{
    key: 'handleMouseWheel',
    value: function handleMouseWheel(e) {
      var delta = Math.max(-1, Math.min(1, e.wheelDelta || -e.detail));

      if (delta === 1) {
        this.props.onMinuteIncrease();
      } else {
        this.props.onMinuteDecrease();
      }
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      var minutePicker = document.getElementById('minutePicker');
      minutePicker.addEventListener('mousewheel', this.handleMouseWheel.bind(this));
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      var minutePicker = document.getElementById('minutePicker');
      minutePicker.removeEventListener('mousewheel', this.handleMouseWheel.bind(this));
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props;
      var minute = _props.minute;
      var onMinuteIncrease = _props.onMinuteIncrease;
      var onMinuteDecrease = _props.onMinuteDecrease;

      return _react2.default.createElement(
        'div',
        { id: 'minutePicker', className: 'MinutePicker' },
        _react2.default.createElement(
          'a',
          { className: 'MinutePicker__arrow', onClick: onMinuteIncrease },
          '\u2191'
        ),
        _react2.default.createElement(
          'div',
          { className: 'MinutePicker__minute' },
          minute
        ),
        _react2.default.createElement(
          'div',
          { className: 'MinutePicker__arrow', onClick: onMinuteDecrease },
          '\u2193'
        )
      );
    }
  }]);

  return MinutePicker;
}(_react2.default.Component);

exports.default = MinutePicker;